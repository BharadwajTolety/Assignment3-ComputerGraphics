
How to use?
To load up the models for the scene and drone camera, use the file 'input_config_building.txt'. The first string is the path for loading up the model for the scene and the remaining path strings are used for loading up the model for the drone_camera.

Our program has the following features:\abilities:
1. The camera moves up using the “up” arrow key.
2. The camera moves down using the “down” arrow key.
3. The camera moves left using the “left” arrow key.
4. The camera moves right using the “right” arrow key.
5. The camera turns left in its place using the “a” or “A” key.
6. The camera turns right in its place using the “d” or “D” key.
7. The camera turns up in its place using the “w” or “W” key.
8. The camera turns down in its place using the “s” or “S” key.
9. The camera tilts right in its place using the “f” or “F” key.
10. The camera tilts left in its place using the “c” or “C” key.


In our team we have two different platforms, one windows and one mac. This led to a few complications as stated below:
1. The second viewport does not appear in the right-top corner of the screen in MAc as it does in Windows. We believe this is due to the different sizes of the buffers OpenGL uses.
2. The drone does not show up on the Mac but does appear on the Windows system. 

Animation:

To animate our propeller i.e to rotate it, we created a class 'DronePropeller' where we apply transformations to the propeller individually.We use the rotation speed variable described in the class to dictate the transformations. Picking out which object to animate individually will require a lot of separate classes for each object but is easier to manage the animations. 
If a developer where to pick up our project and wish to animate themselves, they could access our class header files and change the properties they require. As each object is individually animated they have more control on which objects need change.
